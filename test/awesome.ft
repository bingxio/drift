/*
      Hello! This is the awesome program of DRIFT.
*/

/*    
      Keyword:

      def   ret   for   aop
      end   if    ef    nf
      new   out   go    mod
      del   use

      14 items.
*/

/*
      Object:

      1.int
      2.float
      3.char
      4.str
      5.bool
      6.array
      7.tuple
      8.map
      9.enum
      10.function
      11.whole
*/

/*
      Define name:

      def <K>: <T> = <E>

      In drift, use the `def` keyword to define any type of name.
*/

def x: int = 30
def y: []int = [4, 5, 6]

def Color
  RED
  PINK
  NONE
end

def Foo
  def () show
    putl("CALL")
  end
end

putl(x, y, Color, Foo, 1 == Color.PINK)

/*
      Control follow:

1.IF JUMP

      if <E>
        <B>
      [ef <E>]..
        <B>
      [nf]
        <B>
      end

2.AOP LOOP

      aop <E> | ->
        <B>
      end

3.FOR LOOP

      for <K>: <T> = <E>; <E>; <E>
        <B>
      end
*/

def x: int = 10

if x > -1 & x != 0
  putl("OK")
end

if x == 5
  putl("A")
ef x == 8
  putl("B")
ef x == 10
  putl("C")
nf
  putl("P")
end

aop x > 0
  if x % 2 == 0
    put(x)
  end
  x -= 2
end

for i: float = 8.88; i > 0; i -= 0.01
  go i <= 7 /* continue */
  if i <= 8
    out ->  /* break */
  nf
    put(i)
  end
end

/*
      Loop control:

      out ->
      out <E>

      go ->
      go <E>
*/

def x: [5]int   /* original value */
def y: (str) = ("OK", "NO", "PP")
def z: <int, str> = {3: "A", 5: "K", 8: "L"}

putl(x, y, z)
putl(x[0], y.1, z[5])

/*
      Function:

      def <K>(<E>..) | -> <E>
        <B>
      end
*/

def (x + y: int, z: str) foo -> int
  if len(z) != 0
    putl(z)
  end
  ret (x + y) * 2
end

def (a: int, b: int) add -> int
  ret a + b
end

def (x: |int, int| -> int, a + b: int) sum -> int
  ret x(a, b) + x(a, b)
end
/*
def () set -> |int|
  ret def (x: int)
    ret x * 2
  end
end
*/
def (x: int) bar -> |int, int| -> []int
    putl("x = ", x)

    ret def (a + b: int) -> []int
        ret [
            a,
            b,
            a + b,
            a - b,
            a * b,
            a / b
        ]
    end
end

put(
  foo(2, 3, "p"), add(3, 1), sum(add, 4, 2), bar(12)(3, 4)
)

/*
      Whole:

      def <K>
        <I>..
        <M>..
      end
*/

def Foo
  def () *bar   /* INTERFACE */
  def (bool) *what -> bool

  def x: int
  def y: str = "HELLO!!"

  def (x: int, y: int) max -> int
    if x > y
      ret x
    nf
      ret y
    end
  end
end

def Go
  def () *test
end

def Bar <- Foo + Go
  def () test
    putl("TEST!!")
  end

  def () bar
    test()
  end

  def (x: bool) what -> bool
    ret !x
  end
end

def f: Foo = new Foo{x: 43}
putl(f.x, f.y, f.max(2, 4))

def b: Bar = new Bar
:)	Hello! This is the awesome program of DRIFT.

:>
	Builtin function:

	def		ret 		new		for
	aop		out		go 		if
	ef		nf		del		use

	12 items
//
	Object of program:

	int		float		char		str
	bool		array		tuple		map
	function	whole		enum		module

	12 items
//
	S Expr:

	(<Func> [<Arg>..])
:<

(def int x 45) 	:) Name definition function (def <T> <K> <E>)
(def int x)	:) Original value into `x`

(put x)		:) 45 of `x` and its builtin function not Keyword

(def char x 'p')				:) CHAR

(def <int str> x {200: "OK", 401: "NotFound"})	:) MAP
(def ()int x 2 3 4)				:) TUPLE
(def []int x 2 3 4)				:) ARRAY

:> CONTROL FOLLOW :<

(def int a 45)
(def int b 78)

:) (if <E> <S> [<EF <E>>(S).. | <NF>(S)])
(if (> a b) (put a) (nf (put b)))		:) Output the maximum value
(if (== a b)
	(put "A")
	(ef (> a b)
		(put "B"))
	(ef (> a 0)
		(put "C")
	(nf
		(put "P")))

:) (aop <E> <S>)
(def int p 0) (aop (< p 10000) (put p) (+= p 1))	:) Loop from 0 to 10000

:) (for <E> <E> <E> <S>)
(for (def int i) (< i 20) (+= i 2)			:) Loop from 0 to 20 step 2
	(put i))

:) (go <E> | _)
:) (out <E> | _)
(for (def int i) (< i 999) (+= i 1)
	(if (== i 99)
		(go _))			:) CONTINUE
	(if (== i 888)
		(out _)))		:) BREAK
(for (def int i 20) (> i 10) (-= i 1)
	(go (== (% i 2) 0)))		:) Step even numbers

:> FUNCTION :<

:) The parameter is automatically incremented from A to Z

:) Return the maximum value
(def (int int) max -> int
	(if (> A B)
		(ret A)
		(nf
			(ret B))))
(def () fp -> |int int| -> int		:) Anonymouse function
	(ret (def (int int) _ -> int
		(ret (+ A B)))))
(put (max 45 12))			:) 45
(put ((fp) 2 5))			:) 7

:) Return the last character of string
(def (str) back -> int
	(ret (len A)))
(def (int) random_str -> []str
  	(if (> A 20)
    		(ret [])
  	(nf 
		(def [20]str res)
		(for (def int i) (> lp 0) (-= lp 1)
      			(= (<- res i) (random_str 20 T))
       			(+= i 1)))) (ret res))

(def (str) front -> char (ret (<- A 0))) :) Return the first character of a string

(def (str char) count -> int
	(def int count)
    	(for (def int i) (< i (len A)) (+= i 1)
      		(if (== (<- A i) B)
          		(+= count 1)))
	(ret count))

>: Object oriented :<

:) (def <K> <S>)
(def Foo
	(def () *bar)			:) INTERFACE
	(def (bool) *what -> bool)	:) INTERFACE

	(def int x)			:) MEMBER
	(def str y "HELLO!!")		:) MEMBER
	
	(def (int int) max -> int	:) METHOD
		(if (> A B)
			(ret A)
			(nf
				(ret B)))))
:) New object do not set initial value
(def Foo f (new Foo)) (put (<- f (max 3 5)))		:) 5

:) x is 30, KV pair
(def Foo f (new Foo x 30)) (put (<- f x))		:) 30

(def Bar << Foo				:) INHERIT
	(def () bar
		(put "CALL BAR!!"))

	(def (bool) what -> bool	:) OVERRIDE
		(ret T))

	(def () call			:) OVERRIDE
		(put (max 2 8))))
(put (<- (new Bar) call))		:) 8

>: Enum :<

:) (def <K> -> <E>)
(def Color -> RED GREEN BLUE PINK)
(def Color p Color <- BLUE) (put p)	:) BLUE

(if
	(!= p Color <- PINK)
	(put "CALL!"))			:) CALL

(use io)				:) MODULE
(put ((<- io read) "./A.txt"))

(def (int) fib -> int
	(if (== n 0)
		(ret 0)
		(ef (== n 1)
			(ret 1))
		(nf
			(ret (+ (fib (- n 1)) (fib (- n 2)))))))

(put (fib 20))		:) 6757
(del x) (put x)		:) exception

:) END
